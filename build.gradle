
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
    }
}
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group 'org.lordofthejars.villains'

if (project.hasProperty("nextVersion")) {
    version nextVersion
} else {
    version '1.0-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

project.ext {
    vertxVersion = '3.4.1'
}

dependencies {
    compile "io.vertx:vertx-core:${project.ext.vertxVersion}"
    compile "io.vertx:vertx-web:${project.ext.vertxVersion}"
    compile "io.vertx:vertx-rx-java:${project.ext.vertxVersion}"
    compile "io.vertx:vertx-jdbc-client:${project.ext.vertxVersion}"
    testCompile "io.vertx:vertx-unit:${project.ext.vertxVersion}"
    compile "com.h2database:h2:1.4.194"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'io.rest-assured:rest-assured:3.0.3'
}

def runner = 'org.lordofthejars.villains.crimes.CrimesVerticle'

// Vert.x watches for file changes in all subdirectories
// of src/ but only for files with .java extension
def watchForChange = 'src/**/*.java'

// Vert.x will call this task on changes
def doOnChange
if (System.getProperty("os.name").toLowerCase().contains("windows")) {
    doOnChange = '.\\gradlew classes'
} else {
    doOnChange = './gradlew classes'
}

task exec(type:JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "io.vertx.core.Launcher"
    args = ["run", "--redeploy=$watchForChange", "--launcher-class=$runner", "--on-redeploy=$doOnChange"]
}

task createBuildInfoFile {
    doLast {
        def buildInfoFile = new File("$buildDir/classes/java/main/build-info.json")
        buildInfoFile.createNewFile()
        def version = project.getVersion()
        buildInfoFile.text = """
{
  "version": "$version"
}
"""
    }
}

shadowJar {
    dependsOn createBuildInfoFile

    mainClassName = runner
    archiveName = "${rootProject.name}-service-${version}.jar"

    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

docker {
    if (System.env.containsKey('DOCKER_HOST') && System.env.containsKey('DOCKER_CERT_PATH')) {
        url = System.env.DOCKER_HOST.replace("tcp", "https")
        certPath = new File(System.env.DOCKER_CERT_PATH)
    }
}

task buildImage(type: DockerBuildImage) {
    dependsOn shadowJar
    inputDir = project.rootDir
    tag = "${rootProject.name}:${project.version}"
}

task patchNewVersion(type: Exec) {
    dependsOn buildImage

    commandLine "oc patch dc ${rootProject.name} --type=json -p='[{\"op\": \"replace\", \"path\":\"/spec/template/spec/containers/0/image\",\"value\": \"${rootProject.name}:${project.version}\" }]'"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}

task deployNewVersion(type: Exec) {
    dependsOn patchNewVersion

    commandLine ""

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }

}

task rollbackToDeployment(type: Exec) {

    commandLine "oc rollback ${rootProject.name}-${project.findProperty('deployment')}"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}


